package com.cylande.unitedretail.batch.business.query;

import com.cylande.unitedretail.batch.business.query.common.BatchErrorsView;
import com.cylande.unitedretail.common.transformer.CriteriaTransformer;
import com.cylande.unitedretail.framework.business.jbo.server.ViewObjectImpl;
import com.cylande.unitedretail.message.batch.BatchRunKeyType;
import com.cylande.unitedretail.message.common.criteria.CriteriaIntegerType;
import com.cylande.unitedretail.message.common.criteria.CriteriaStringType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BatchErrorsViewImpl extends ViewObjectImpl implements BatchErrorsView
{
  /**This is the default constructor (do not remove)
   */
  public BatchErrorsViewImpl()
  {
  }

  /**
   * Vérifie la présence de taskaudit pour le batchkey en effectuant une recherche superficielle
   * @param pKey
   * @return résultat
   */
  public boolean atLeastTaskError(BatchRunKeyType pKey)
  {
    if (pKey == null || pKey.getId() == null || pKey.getPath() == null)
    {
      return false;
    }
    configQueryTaskAuditOfBatch(pKey);
    clearCache();
    long count = getEstimatedRowCount();
    clearViewCriterias();
    setWhereClause(null);
    setWhereClauseParams(null);
    if (count > 0)
    {
      return true;
    }
    return false;
  }

  /**
   * Recherche les erreurs de task de premier niveau (superficielle)
   * @param pKey
   */
  public void findTaskAuditOfBatch(BatchRunKeyType pKey)
  {
    if (pKey == null || pKey.getId() == null)
    {
      return;
    }
    configQueryTaskAuditOfBatch(pKey);
    executeQuery();
    clearViewCriterias();
    setWhereClause(null);
    setWhereClauseParams(null);
  }

  private void configQueryTaskAuditOfBatch(BatchRunKeyType pKey)
  {
    CriteriaIntegerType idcrit = new CriteriaIntegerType();
    idcrit.setEquals(pKey.getId());
    CriteriaStringType pathcrit = new CriteriaStringType();
    pathcrit.setEquals(pKey.getPath());
    CriteriaTransformer criteriaTransformer = CriteriaTransformer.createCriteriaWhereClause(this);
    criteriaTransformer.addElement("BatchRun.ID", idcrit);
    criteriaTransformer.addElement("BatchRun.BATCH_CODE", pathcrit);
    if (pKey.getSite() != null && pKey.getSite().getCode() != null)
    {
      criteriaTransformer.addElement("BatchRun.SITE_CODE", pKey.getSite().getCode());
    }
    criteriaTransformer.closeCurrentCriteria();
    StringBuffer querybuff = new StringBuffer();
    String joinclause = "(BatchRun.ID = TaskRun.PARENT_ID) AND ((TaskRun.ID = TaskAudit.TASK) AND (TaskRun.TASK_CODE = TaskAudit.TASK_CODE)";
    if (pKey.getSite() != null && pKey.getSite().getCode() != null)
    {
      joinclause = joinclause + " AND (BatchRun.SITE_CODE = TaskRun.SITE_CODE) AND (TaskRun.SITE_CODE = TaskAudit.SITE_CODE))";
    }
    else
    {
      joinclause = joinclause + ")";
    }
    querybuff.append(getQuery()).append(" WHERE ").append(criteriaTransformer.getWhereClause()).append(" AND ").append(joinclause);
    setQuery(querybuff.toString());
    setWhereClauseParams(criteriaTransformer.getParams());
  }
  /*
  public boolean atLeastTaskError(BatchRunCriteriaType pCriteria)
  {
    if (pCriteria == null)
    {
      return false;
    }
    setWhereClause(null);
    setWhereClauseParams(null);
    CriteriaTransformer criteriaTransformer = CriteriaTransformer.createCriteriaWhereClause(this);
    criteriaTransformer.addElement("BatchRun.BATCH_CODE", pCriteria.getPath());
    criteriaTransformer.addElement("BatchRun.ID", pCriteria.getId());
    criteriaTransformer.closeCurrentCriteria();
    //System.out.println("QUERY " + getQuery());
    String query = getQuery() + " WHERE " + criteriaTransformer.getWhereClause();
    setQuery(query);
    //setWhereClause(criteriaTransformer.getWhereClause());
    //etWhereClause(criteriaTransformer.getWhereClause());
    setWhereClauseParams(criteriaTransformer.getParams());
    //System.out.println("FINAL : " + getQuery());

    // start comment
    setWhereClause(null);
    setWhereClauseParams(null);
    CriteriaTransformer criteriaTransformer = CriteriaTransformer.createCriteriaWhereClause(this);
    criteriaTransformer.addElement("BatchRun.BATCH_CODE", pCriteria.getPath());
    criteriaTransformer.addElement("BatchRun.ID", pCriteria.getId());
    criteriaTransformer.closeCurrentCriteria();
    String whereclause = criteriaTransformer.getWhereClause();
    String joinclause = "(BatchRun.ID = TaskRun.PARENT_ID) AND ((TaskRun.ID = TaskAudit.TASK) AND (TaskRun.TASK_CODE = TaskAudit.TASK_CODE))";
    if (whereclause != null && !whereclause.equals(""))
    {
      whereclause = whereclause + " AND " + joinclause;
    }
    else
    {
      whereclause = whereclause + " " + joinclause;
    }
    setWhereClause(whereclause);
    String query = getQuery();
    //System.out.println("QUERY : " + query);
    //query = query + " (BatchRun.ID = TaskRun.PARENT_ID) AND ((TaskRun.ID = TaskAudit.TASK) AND (TaskRun.TASK_CODE = TaskAudit.TASK_CODE))";
    setWhereClauseParams(criteriaTransformer.getParams());
    //System.out.println("FINAL QUERY : " + getQuery());
    //TODO terminer la clause
    long count = getEstimatedRowCount();
    if (count > 0)
    {
      return true;
    }
    // end comment
    executeQuery();
    return false;
  }
  */
  /*
   *(BatchRun.ID = TaskRun.PARENT_ID) AND ((TaskRun.ID = TaskAudit.TASK) AND (TaskRun.TASK_CODE = TaskAudit.TASK_CODE))
   */
  /*
  public boolean atLeastInstanceIsInError(String pBatchPath, boolean pOnlyBatchRoot)
  {
    if (pBatchPath == null || pBatchPath.equals(""))
    {
      return false;
    }
    setWhereClause(null);
    setWhereClauseParams(null);
    String query = getQuery();
    StringBuffer request = new StringBuffer();
    request.append(query);
    request.append(" WHERE ");
    request.append(" (BatchRun.BATCH_CODE LIKE '");
    if (!pOnlyBatchRoot)
    {
      request.append(pBatchPath).append("%");
    }
    request.append("') AND (BatchRun.ID = TaskRun.PARENT_ID) AND ((TaskRun.ID = TaskAudit.TASK) AND (TaskRun.TASK_CODE = TaskAudit.TASK_CODE))");
    setQuery(request.toString());
    long count = getEstimatedRowCount();
    if (count > 0)
    {
      return true;
    }
    return false;
  }
*/
  /*
  public void findTaskAuditOfBatch(int pBatchId)
  {
  //DEPRECATED
    setWhereClause(null);
    setWhereClauseParams(null);
    String request = getQuery();
    StringBuffer buff = new StringBuffer();
    buff.append(request).append(" (BatchRun.ID = '");
    buff.append(pBatchId);
    buff.append("') AND (BatchRun.ID = TaskRun.PARENT_ID) AND ((TaskRun.ID = TaskAudit.TASK) AND (TaskRun.TASK_CODE = TaskAudit.TASK_CODE))");
    setWhereClause(buff.toString());
    executeQuery();
  }
  */
}
