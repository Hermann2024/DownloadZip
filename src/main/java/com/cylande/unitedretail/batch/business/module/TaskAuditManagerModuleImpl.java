package com.cylande.unitedretail.batch.business.module;

import com.cylande.unitedretail.batch.business.module.common.TaskAuditManagerModule;
import com.cylande.unitedretail.batch.business.query.TaskAuditViewImpl;
import com.cylande.unitedretail.batch.business.query.common.TaskAuditViewRow;
import com.cylande.unitedretail.batch.transformer.TaskAuditTransformer;
import com.cylande.unitedretail.framework.business.jbo.server.ApplicationModuleImpl;
import com.cylande.unitedretail.message.batch.TaskAuditCriteriaListType;
import com.cylande.unitedretail.message.batch.TaskAuditKeyType;
import com.cylande.unitedretail.message.batch.TaskAuditListType;
import com.cylande.unitedretail.message.batch.TaskAuditScenarioType;
import com.cylande.unitedretail.message.batch.TaskAuditType;
import com.cylande.unitedretail.message.common.context.ContextType;

import oracle.jbo.AttributeList;
import oracle.jbo.NameValuePairs;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TaskAuditManagerModuleImpl extends ApplicationModuleImpl implements TaskAuditManagerModule
{
  /**This is the default constructor (do not remove)
   */
  public TaskAuditManagerModuleImpl()
  {
  }

  public TaskAuditType createTaskAudit(TaskAuditType pTaskAudit, TaskAuditScenarioType pScenario, ContextType pContext)
  {
    TaskAuditType result = new TaskAuditType();
    if (pTaskAudit != null)
    {
      AttributeList myList = new NameValuePairs();
      myList.setAttribute("SiteCode", pTaskAudit.getSite().getCode());
      myList.setAttribute("Task", pTaskAudit.getTask());
      myList.setAttribute("Path", pTaskAudit.getPath());
      TaskAuditViewRow myRow = (TaskAuditViewRow)getTaskAuditView().createAndInitRow(myList);
      setRow(pTaskAudit, myRow, true, pContext);
      result = getBean(myRow, pContext);
    }
    return result;
  }

  public TaskAuditListType createTaskAuditList(TaskAuditListType pList, TaskAuditScenarioType pScenario, ContextType pContext)
  {
    TaskAuditListType result = null;
    if (pList != null)
    {
      result = new TaskAuditListType();
      for (int i = 0; i < pList.getValues().size(); i++)
      {
        result.getValues().add(createTaskAudit(pList.getValues().get(i), pScenario, pContext));
      }
    }
    return result;
  }

  public void deleteTaskAudit(TaskAuditKeyType pKey, TaskAuditScenarioType pScenario, ContextType pContext)
  {
    if (pKey != null)
    {
      TaskAuditViewRow myRow = getTaskAuditView().getRow(pKey);
      if (myRow != null)
      {
        myRow.remove();
      }
    }
  }

  public void deleteTaskAuditList(TaskAuditCriteriaListType pCriterias, TaskAuditScenarioType pScenario, ContextType pContext)
  {
    if (pCriterias != null)
    {
      TaskAuditViewImpl view = getTaskAuditView();
      view.findByCriterias(pCriterias);
      while (view.hasNext())
      {
        view.next().remove();
      }
      view.clearViewCriterias();
    }
  }

  public TaskAuditListType findTaskAudit(TaskAuditCriteriaListType pCriterias, TaskAuditScenarioType pScenario, ContextType pContext)
  {
    TaskAuditViewImpl view = getTaskAuditView();
    try
    {
      view.initForwardOnly();
      TaskAuditListType result = null;
      if (pCriterias != null)
      {
        view.findByCriterias(pCriterias);
        if (view.hasNext())
        {
          result = new TaskAuditListType();
          while (view.hasNext())
          {
            result.getValues().add(getBean((TaskAuditViewRow)view.next(), pContext));
          }
        }
        view.clearViewCriterias();
      }
      return result;
    }
    finally
    {
      view.releaseForwardOnly();
    }
  }

  public TaskAuditType getTaskAudit(TaskAuditKeyType pKey, TaskAuditScenarioType pScenario, ContextType pContext)
  {
    TaskAuditType result = null;
    if (pKey != null)
    {
      result = getBean(getTaskAuditView().getRow(pKey), pContext);
    }
    return result;
  }

  public TaskAuditType postTaskAudit(TaskAuditType pTaskAudit, TaskAuditScenarioType pScenario, ContextType pContext)
  {
    return updateTaskAudit(pTaskAudit, pScenario, pContext, true);
  }

  public TaskAuditListType postTaskAuditList(TaskAuditListType pList, TaskAuditScenarioType pScenario, ContextType pContext)
  {
    TaskAuditListType result = null;
    if (pList != null)
    {
      result = new TaskAuditListType();
      for (int i = 0; i < pList.getValues().size(); i++)
      {
        result.getValues().add(postTaskAudit(pList.getValues().get(i), pScenario, pContext));
      }
    }
    return result;
  }

  public TaskAuditType updateTaskAudit(TaskAuditType pTaskAudit, TaskAuditScenarioType pScenario, ContextType pContext)
  {
    return updateTaskAudit(pTaskAudit, pScenario, pContext, false);
  }

  public TaskAuditListType updateTaskAuditList(TaskAuditListType pList, TaskAuditScenarioType pScenario, ContextType pContext)
  {
    TaskAuditListType result = null;
    if (pList != null)
    {
      result = new TaskAuditListType();
      for (int i = 0; i < pList.getValues().size(); i++)
      {
        result.getValues().add(updateTaskAudit(pList.getValues().get(i), pScenario, pContext));
      }
    }
    return result;
  }

  private TaskAuditType updateTaskAudit(TaskAuditType pTaskAudit, TaskAuditScenarioType pScenario, ContextType pContext, boolean pCreate)
  {
    TaskAuditType result = null;
    if (pTaskAudit != null)
    {
      TaskAuditViewRow myRow = getTaskAuditView().getRow(pTaskAudit);
      if (myRow != null)
      {
        setRow(pTaskAudit, myRow, false, pContext);
        result = getBean(myRow, pContext);
      }
      else if (pCreate)
      {
        result = createTaskAudit(pTaskAudit, pScenario, pContext);
      }
    }
    return result;
  }

  private TaskAuditType getBean(TaskAuditViewRow pRow, ContextType pContext)
  {
    TaskAuditType result = TaskAuditTransformer.toBean(pRow, pContext);
    return result;
  }

  private void setRow(TaskAuditType pTaskAudit, TaskAuditViewRow pRow, boolean pCreate, ContextType pContext)
  {
    TaskAuditTransformer.toRow(pTaskAudit, pRow);
    if (pCreate)
    {
      getTaskAuditView().insertRow(pRow);
    }
    getRootApplicationModule().getTransaction().postChanges();
  }

  /**Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  { /* package name */
    /* Configuration Name */launchTester("com.cylande.unitedretail.batch.business.module", "TaskAuditManagerModuleLocal");
  }

  /**Container's getter for TaskAuditView
   */
  public TaskAuditViewImpl getTaskAuditView()
  {
    return (TaskAuditViewImpl)findViewObject("TaskAuditView");
  }
}
