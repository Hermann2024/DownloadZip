package com.cylande.unitedretail.batch.business.module;

import com.cylande.unitedretail.batch.business.module.common.FileProviderTraceManagerModule;
import com.cylande.unitedretail.batch.business.module.common.TaskRunManagerModule;
import com.cylande.unitedretail.batch.business.query.FileProviderTraceViewImpl;
import com.cylande.unitedretail.batch.business.query.TaskAuditViewImpl;
import com.cylande.unitedretail.batch.business.query.TaskRunViewImpl;
import com.cylande.unitedretail.batch.business.query.common.FileProviderTraceViewRow;
import com.cylande.unitedretail.batch.business.query.common.TaskAuditViewRow;
import com.cylande.unitedretail.batch.business.query.common.TaskRunViewRow;
import com.cylande.unitedretail.batch.exception.BatchErrorDetail;
import com.cylande.unitedretail.batch.transformer.FileProviderTraceTransformer;
import com.cylande.unitedretail.batch.transformer.TaskAuditTransformer;
import com.cylande.unitedretail.batch.transformer.TaskRunTransformer;
import com.cylande.unitedretail.batch.transformer.coordinator.TaskRunCoordinator;
import com.cylande.unitedretail.framework.business.jbo.TechnicalJboException;
import com.cylande.unitedretail.framework.business.jbo.server.ApplicationModuleImpl;
import com.cylande.unitedretail.framework.tools.URStatement;
import com.cylande.unitedretail.message.batch.FileProviderTraceListType;
import com.cylande.unitedretail.message.batch.FileProviderTraceType;
import com.cylande.unitedretail.message.batch.TaskAuditCriteriaListType;
import com.cylande.unitedretail.message.batch.TaskAuditCriteriaType;
import com.cylande.unitedretail.message.batch.TaskAuditListType;
import com.cylande.unitedretail.message.batch.TaskAuditType;
import com.cylande.unitedretail.message.batch.TaskBooleanResponseType;
import com.cylande.unitedretail.message.batch.TaskRunCriteriaListType;
import com.cylande.unitedretail.message.batch.TaskRunKeyType;
import com.cylande.unitedretail.message.batch.TaskRunListType;
import com.cylande.unitedretail.message.batch.TaskRunScenarioType;
import com.cylande.unitedretail.message.batch.TaskRunType;
import com.cylande.unitedretail.message.common.context.ContextType;
import com.cylande.unitedretail.message.common.criteria.CriteriaIntegerType;
import com.cylande.unitedretail.message.common.criteria.CriteriaStringType;

import java.sql.SQLException;

import java.util.ArrayList;
import java.util.List;

import oracle.jbo.AttributeList;
import oracle.jbo.NameValuePairs;
import oracle.jbo.RowIterator;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TaskRunManagerModuleImpl extends ApplicationModuleImpl implements TaskRunManagerModule
{
  /**This is the default constructor (do not remove)
   */
  public TaskRunManagerModuleImpl()
  {
  }

  /**
   * @param pTaskRun
   * @param pScenario
   * @param pContext
   * @return résultat
   */
  public TaskRunType createTaskRun(TaskRunType pTaskRun, TaskRunScenarioType pScenario, ContextType pContext)
  {
    TaskRunType result = new TaskRunType();
    if (pTaskRun != null)
    {
      AttributeList attList = new NameValuePairs();
      attList.setAttribute("ParentId", pTaskRun.getParentId());
      attList.setAttribute("SiteCode", pTaskRun.getSite().getCode());
      attList.setAttribute("Path", pTaskRun.getPath());
      if (pTaskRun.getId() != null)
      {
        attList.setAttribute("Id", pTaskRun.getId());
      }
      TaskRunViewRow row = (TaskRunViewRow)getTaskRunView().createAndInitRow(attList);
      setRow(pTaskRun, row, true, pContext);
      result = getBean(row, pScenario, pContext);
    }
    return result;
  }

  /**
   * @param pList
   * @param pScenario
   * @param pContext
   * @return résultat
   */
  public TaskRunListType createTaskRunList(TaskRunListType pList, TaskRunScenarioType pScenario, ContextType pContext)
  {
    TaskRunListType result = null;
    if (pList != null)
    {
      result = new TaskRunListType();
      for (int i = 0; i < pList.getValues().size(); i++)
      {
        result.getValues().add(createTaskRun(pList.getValues().get(i), pScenario, pContext));
      }
    }
    return result;
  }

  /**
   * @param pKey
   * @param pScenario
   * @param pContext
   */
  public void deleteTaskRun(TaskRunKeyType pKey, TaskRunScenarioType pScenario, ContextType pContext)
  {
    if (pKey != null)
    {
      TaskRunViewRow myRow = getTaskRunView().getRow(pKey);
      if (myRow != null)
      {
        deleteAssociatedRow(myRow);
        myRow.remove();
      }
    }
  }

  /**
   * @param pCriterias
   * @param pScenario
   * @param pContext
   */
  public void deleteTaskRunList(TaskRunCriteriaListType pCriterias, TaskRunScenarioType pScenario, ContextType pContext)
  {
    if (pCriterias != null)
    {
      TaskRunViewImpl taskRunView = getTaskRunView();
      try
      {
        taskRunView.initForwardOnly();
        taskRunView.findByCriterias(pCriterias);
        while (taskRunView.hasNext())
        {
          TaskRunViewRow currentRow = (TaskRunViewRow)taskRunView.next();
          deleteAssociatedRow(currentRow);
          currentRow.remove();
        }
      }
      finally
      {
        taskRunView.releaseForwardOnly();
        taskRunView.resetWhereClause();
      }
    }
  }

  /**
   * Suppression des données associées au TASK_RUN passé en paramètre.
   * @param pRow Row de TASK_RUN
   */
  private void deleteAssociatedRow(TaskRunViewRow pRow)
  {
    if (pRow.getId() != null)
    {
      try
      {
        // TASK_AUDIT
        URStatement deleteTaskAuditStmt = new URStatement(this);
        try
        {
          deleteTaskAuditStmt.addSQL("DELETE FROM TASK_AUDIT WHERE TASK = :taskId");
          deleteTaskAuditStmt.setInt("taskId", pRow.getId().intValue());
          deleteTaskAuditStmt.execute();
        }
        finally
        {
          deleteTaskAuditStmt.close();
        }
        // FILE_PROVIDER_TRACE
        URStatement deleteFileProviderTraceStmt = new URStatement(this);
        try
        {
          deleteFileProviderTraceStmt.addSQL("DELETE FROM FILE_PROVIDER_TRACE WHERE TASK_ID = :taskId");
          deleteFileProviderTraceStmt.setInt("taskId", pRow.getId().intValue());
          deleteFileProviderTraceStmt.execute();
        }
        finally
        {
          deleteFileProviderTraceStmt.close();
        }
      }
      catch (SQLException sqlexception)
      {
        throw new TechnicalJboException(BatchErrorDetail.TASK_DELETE_ASSOCIATED_ROW_ERROR, new Object[] { pRow.getId().intValue() }, sqlexception);
      }
    }
  }

  /**
   * @param pCriterias
   * @param pScenario
   * @param pContext
   * @return résultat
   */
  public TaskRunListType findTaskRun(TaskRunCriteriaListType pCriterias, TaskRunScenarioType pScenario, ContextType pContext)
  {
    TaskRunViewImpl view = getTaskRunView();
    try
    {
      view.initForwardOnly();
      TaskRunListType result = null;
      if (pCriterias != null)
      {
        view.findByCriterias(pCriterias);
        if (view.hasNext())
        {
          result = new TaskRunListType();
          while (view.hasNext())
          {
            TaskRunViewRow row = (TaskRunViewRow)view.next();
            result.getValues().add(getBean(row, pScenario, pContext));
          }
        }
        view.clearViewCriterias();
      }
      return result;
    }
    finally
    {
      view.releaseForwardOnly();
    }
  }

  /**
   * @param pKey
   * @param pScenario
   * @param pContext
   * @return résultat
   */
  public TaskRunType getTaskRun(TaskRunKeyType pKey, TaskRunScenarioType pScenario, ContextType pContext)
  {
    TaskRunType result = null;
    if (pKey != null)
    {
      result = getBean(getTaskRunView().getRow(pKey), pScenario, pContext);
    }
    return result;
  }

  /**
   * @param pTaskRun
   * @param pScenario
   * @param pContext
   * @return résultat
   */
  public TaskRunType postTaskRun(TaskRunType pTaskRun, TaskRunScenarioType pScenario, ContextType pContext)
  {
    return updateTaskRun(pTaskRun, pScenario, pContext, true);
  }

  /**
   * @param pList
   * @param pScenario
   * @param pContext
   * @return résultat
   */
  public TaskRunListType postTaskRunList(TaskRunListType pList, TaskRunScenarioType pScenario, ContextType pContext)
  {
    TaskRunListType result = null;
    if (pList != null)
    {
      result = new TaskRunListType();
      for (int i = 0; i < pList.getValues().size(); i++)
      {
        result.getValues().add(postTaskRun(pList.getValues().get(i), pScenario, pContext));
      }
    }
    return result;
  }

  /**
   * @param pTaskRun
   * @param pScenario
   * @param pContext
   * @return résultat
   */
  public TaskRunType updateTaskRun(TaskRunType pTaskRun, TaskRunScenarioType pScenario, ContextType pContext)
  {
    return updateTaskRun(pTaskRun, pScenario, pContext, false);
  }

  /**
   * @param pList
   * @param pScenario
   * @param pContext
   * @return résultat
   */
  public TaskRunListType updateTaskRunList(TaskRunListType pList, TaskRunScenarioType pScenario, ContextType pContext)
  {
    TaskRunListType result = null;
    if (pList != null)
    {
      result = new TaskRunListType();
      for (int i = 0; i < pList.getValues().size(); i++)
      {
        result.getValues().add(updateTaskRun(pList.getValues().get(i), pScenario, pContext));
      }
    }
    return result;
  }

  /**
   * @param pTaskRun
   * @param pScenario
   * @param pContext
   * @param pCreate
   * @return résultat
   */
  private TaskRunType updateTaskRun(TaskRunType pTaskRun, TaskRunScenarioType pScenario, ContextType pContext, boolean pCreate)
  {
    TaskRunType result = null;
    if (pTaskRun != null)
    {
      TaskRunViewRow myRow = getTaskRunView().getRow(pTaskRun);
      if (myRow != null)
      {
        setRow(pTaskRun, myRow, false, pContext);
        result = getBean(myRow, pScenario, pContext);
      }
      else if (pCreate)
      {
        result = createTaskRun(pTaskRun, pScenario, pContext);
      }
    }
    return result;
  }

  /**
   * @param pRow
   * @param pScenario
   * @param pContext
   * @return résultat
   */
  private TaskRunType getBean(TaskRunViewRow pRow, TaskRunScenarioType pScenario, ContextType pContext)
  {
    TaskRunType result = TaskRunTransformer.toBean(pRow, pContext);
    return result;
  }

  /**
   * @param pTaskRun
   * @param pRow
   * @param pCreate
   * @param pContext
   */
  private void setRow(TaskRunType pTaskRun, TaskRunViewRow pRow, boolean pCreate, ContextType pContext)
  {
    TaskRunTransformer.toRow(pTaskRun, pRow);
    if (pCreate)
    {
      getTaskRunView().insertRow(pRow);
    }
    postTrace(pTaskRun);
    getRootApplicationModule().getTransaction().postChanges();
  }

  /**
   * @param pTaskRunKey
   * @param pScenario
   * @param pContext
   * @return résultat
   */
  public TaskBooleanResponseType atLeastTaskError(TaskRunKeyType pTaskRunKey, TaskRunScenarioType pScenario, ContextType pContext)
  {
    if (pTaskRunKey == null || pTaskRunKey.getId() == null || pTaskRunKey.getPath() == null)
    {
      return null;
    }
    TaskAuditViewImpl myView = getTaskAuditView();
    TaskAuditCriteriaListType auditcritlist = new TaskAuditCriteriaListType();
    List<TaskAuditCriteriaType> criterialist = new ArrayList<TaskAuditCriteriaType>();
    TaskAuditCriteriaType auditcrit = new TaskAuditCriteriaType();
    CriteriaStringType critpath = new CriteriaStringType();
    critpath.setEquals(pTaskRunKey.getPath());
    auditcrit.setPath(critpath);
    CriteriaIntegerType crittask = new CriteriaIntegerType();
    crittask.setEquals(pTaskRunKey.getId());
    auditcrit.setTaskId(crittask);
    criterialist.add(auditcrit);
    auditcritlist.setList(criterialist);
    // test de la clé de associée au taskrun sur la vue
    boolean test = myView.atLeastFindResult(auditcritlist);
    TaskBooleanResponseType response = new TaskBooleanResponseType();
    response.setValue(test);
    return response;
  }

  /**
   * @param pKey
   * @param pScenario
   * @param pContext
   * @return résultat
   */
  public TaskAuditListType getTaskAuditOfTaskRun(TaskRunKeyType pKey, TaskRunScenarioType pScenario, ContextType pContext)
  {
    TaskAuditListType response = null;
    if (pKey == null || pKey.getId() == null || pKey.getPath() == null)
    {
      return null;
    }
    TaskRunViewRow trvr = getTaskRunView().getRow(pKey);
    RowIterator rowitTaskAudit = trvr.getTaskAuditView();
    if (rowitTaskAudit.hasNext())
    {
      response = new TaskAuditListType();
      TaskAuditViewRow row;
      List<TaskAuditType> list = new ArrayList<TaskAuditType>();
      while (rowitTaskAudit.hasNext())
      {
        row = (TaskAuditViewRow)rowitTaskAudit.next();
        list.add(TaskAuditTransformer.toBean(row, pContext));
      }
      response.setValues(list);
    }
    return response;
  }

  /**
   * @param pKey
   * @param pScenario
   * @param pContext
   * @return résultat
   */
  public FileProviderTraceListType getFileProviderTraceOfTaskRun(TaskRunKeyType pKey, TaskRunScenarioType pScenario, ContextType pContext)
  {
    FileProviderTraceListType response = null;
    if (pKey == null || pKey.getId() == null || pKey.getPath() == null)
    {
      return null;
    }
    TaskRunViewRow trvr = getTaskRunView().getRow(pKey);
    RowIterator rowitFileProviderTrace = trvr.getFileProviderTraceView();
    if (rowitFileProviderTrace.hasNext())
    {
      response = new FileProviderTraceListType();
      FileProviderTraceViewRow row;
      List<FileProviderTraceType> list = new ArrayList<FileProviderTraceType>();
      while (rowitFileProviderTrace.hasNext())
      {
        row = (FileProviderTraceViewRow)rowitFileProviderTrace.next();
        list.add(FileProviderTraceTransformer.toBean(row, pContext));
      }
      response.setList(list);
    }
    return response;
  }

  /**
   * Poster les Possibles Modifications sur toute les Collections associés au Produit
   * @param pTaskRun
   */
  private void postTrace(TaskRunType pTaskRun)
  {
    TaskRunCoordinator.postAssociatedRow(pTaskRun, getFileProviderTraceManagerModule());
  }

  /**Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  { /* package name */
    /* Configuration Name */launchTester("com.cylande.unitedretail.batch.business.module", "TaskRunManagerModuleLocal");
  }

  /**Container's getter for TaskRunView
   */
  public TaskRunViewImpl getTaskRunView()
  {
    return (TaskRunViewImpl)findViewObject("TaskRunView");
  }

  /**Container's getter for TaskAuditView
   */
  public TaskAuditViewImpl getTaskAuditView()
  {
    return (TaskAuditViewImpl)findViewObject("TaskAuditView");
  }

  /**Container's getter for FileProviderTraceView
   */
  public FileProviderTraceViewImpl getFileProviderTraceView()
  {
    return (FileProviderTraceViewImpl)findViewObject("FileProviderTraceView");
  }

  /**Container's getter for FileProviderTraceManagerModule
   */
  public FileProviderTraceManagerModule getFileProviderTraceManagerModule()
  {
    return (FileProviderTraceManagerModule)findApplicationModule("FileProviderTraceManagerModule");
  }
}
