package com.cylande.unitedretail.batch.business.module;

import com.cylande.unitedretail.batch.business.module.common.ProviderCrcManagerModule;
import com.cylande.unitedretail.batch.business.query.ProviderCrcViewImpl;
import com.cylande.unitedretail.batch.business.query.common.ProviderCrcViewRow;
import com.cylande.unitedretail.batch.transformer.ProviderCrcTransformer;
import com.cylande.unitedretail.framework.business.jbo.domain.common.Timestamp;
import com.cylande.unitedretail.framework.business.jbo.server.ApplicationModuleImpl;
import com.cylande.unitedretail.message.batch.ProviderCrcKeyType;
import com.cylande.unitedretail.message.batch.ProviderCrcScenarioType;
import com.cylande.unitedretail.message.batch.ProviderCrcType;
import com.cylande.unitedretail.message.common.context.ContextType;

import java.util.Calendar;

import oracle.jbo.AttributeList;
import oracle.jbo.NameValuePairs;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProviderCrcManagerModuleImpl extends ApplicationModuleImpl implements ProviderCrcManagerModule
{

  /**This is the default constructor (do not remove)
   */
  public ProviderCrcManagerModuleImpl()
  {
  }

  private ProviderCrcType getBean(ProviderCrcViewRow pRow, ProviderCrcScenarioType pScenario)
  {
    ProviderCrcType result = ProviderCrcTransformer.toBean(pRow);
    return result;
  }

  private void setRow(ProviderCrcType pProviderCrc, ProviderCrcViewRow pRow, boolean pCreate, ContextType pContext)
  {
    ProviderCrcTransformer.toRow(pProviderCrc, pRow);
    if (pCreate)
    {
      getProviderCrcView().insertRow(pRow);
    }
    getRootApplicationModule().getTransaction().postChanges();
  }

  private ProviderCrcType updateProviderCrc(ProviderCrcType pProviderCrc, ProviderCrcScenarioType pScenario, ContextType pContext, boolean pCreate)
  {
    ProviderCrcType result = null;
    getChrono().start();
    if (pProviderCrc != null)
    {
      ProviderCrcViewRow myRow;
      myRow = getProviderCrcView().getRowByKey(pProviderCrc);
      if (myRow != null)
      {
        setRow(pProviderCrc, myRow, false, pContext);
        result = getBean(myRow, pScenario);
      }
      else if (pCreate)
      {
        result = createProviderCrc(pProviderCrc, pScenario, pContext);
      }
    }
    getChrono().stop(this);
    return result;
  }

  private ProviderCrcType removeProviderCrc(ProviderCrcKeyType pKey, ProviderCrcScenarioType pScenario, ContextType pContext, boolean returnSupressed)
  {
    ProviderCrcType result = null;
    getChrono().start();
    if (pKey != null)
    {
      ProviderCrcViewRow myRow = getProviderCrcView().getRowByKey(pKey);
      if (myRow != null)
      {
        if (returnSupressed)
        {
          result = getBean(myRow, pScenario);
        }
        myRow.remove();
      }
    }
    getChrono().stop(this);
    return result;
  }

  /**Container's getter for ProviderCrcView
   */
  public ProviderCrcViewImpl getProviderCrcView()
  {
    return (ProviderCrcViewImpl)findViewObject("ProviderCrcView");
  }

  /**Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    /* package name */
    /* Configuration Name */
    launchTester("com.cylande.unitedretail.batch.business.module", "ProviderCrcManagerModuleLocal");
  }

  public ProviderCrcType createProviderCrc(ProviderCrcType pProviderCrc, ProviderCrcScenarioType pScenario, ContextType pContext)
  {
    ProviderCrcType result = new ProviderCrcType();
    getChrono().start();
    if (pProviderCrc != null)
    {
      AttributeList myList = new NameValuePairs();
      myList.setAttribute("Crc", pProviderCrc.getCrc());
      myList.setAttribute("BatchName", pProviderCrc.getBatchName());
      myList.setAttribute("Overridden", pProviderCrc.getOverridden());
      myList.setAttribute("ModificationTime", new Timestamp(Calendar.getInstance()));
      ProviderCrcViewRow myRow = (ProviderCrcViewRow)getProviderCrcView().createAndInitRow(myList);
      setRow(pProviderCrc, myRow, true, pContext);
      result = getBean(myRow, pScenario);
    }
    getChrono().stop(this);
    return result;
  }

  public ProviderCrcType getProviderCrc(ProviderCrcKeyType pKey, ProviderCrcScenarioType pScenario, ContextType pContext)
  {
    ProviderCrcType result = null;
    getChrono().start();
    if (pKey != null)
    {
      result = getBean(getProviderCrcView().getRowByKey(pKey), pScenario);
    }
    getChrono().stop(this);
    return result;
  }

  public ProviderCrcType updateProviderCrc(ProviderCrcType pProviderCrc, ProviderCrcScenarioType pScenario, ContextType pContext)
  {
    return updateProviderCrc(pProviderCrc, pScenario, pContext, false);
  }

  public ProviderCrcType postProviderCrc(ProviderCrcType pProviderCrc, ProviderCrcScenarioType pScenario, ContextType pContext)
  {
    return updateProviderCrc(pProviderCrc, pScenario, pContext, true);
  }

  public void deleteProviderCrc(ProviderCrcKeyType pKey, ProviderCrcScenarioType pScenario, ContextType pContext)
  {
    removeProviderCrc(pKey, pScenario, pContext, false);
  }

  public ProviderCrcType removeProviderCrc(ProviderCrcKeyType pKey, ProviderCrcScenarioType pScenario, ContextType pContext)
  {
    return removeProviderCrc(pKey, pScenario, pContext, true);
  }
}
