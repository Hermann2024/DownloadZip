package com.cylande.unitedretail.batch.business.module;

import com.cylande.unitedretail.batch.business.module.common.BatchRunManagerModule;
import com.cylande.unitedretail.batch.business.query.BatchErrorsViewImpl;
import com.cylande.unitedretail.batch.business.query.BatchInProgressViewImpl;
import com.cylande.unitedretail.batch.business.query.BatchRunInErrorViewImpl;
import com.cylande.unitedretail.batch.business.query.BatchRunViewImpl;
import com.cylande.unitedretail.batch.business.query.TaskAuditViewImpl;
import com.cylande.unitedretail.batch.business.query.TaskAuditViewRowImpl;
import com.cylande.unitedretail.batch.business.query.TaskRunViewImpl;
import com.cylande.unitedretail.batch.business.query.common.BatchErrorsView;
import com.cylande.unitedretail.batch.business.query.common.BatchInProgressView;
import com.cylande.unitedretail.batch.business.query.common.BatchInProgressViewRow;
import com.cylande.unitedretail.batch.business.query.common.BatchRunView;
import com.cylande.unitedretail.batch.business.query.common.BatchRunViewRow;
import com.cylande.unitedretail.batch.business.query.common.TaskAuditView;
import com.cylande.unitedretail.batch.business.query.common.TaskRunViewRow;
import com.cylande.unitedretail.batch.exception.BatchErrorDetail;
import com.cylande.unitedretail.batch.transformer.BatchInProgressTransformer;
import com.cylande.unitedretail.batch.transformer.BatchRunTransformer;
import com.cylande.unitedretail.batch.transformer.TaskAuditTransformer;
import com.cylande.unitedretail.batch.transformer.TaskRunTransformer;
import com.cylande.unitedretail.common.transformer.CriteriaTransformer;
import com.cylande.unitedretail.framework.business.jbo.TechnicalJboException;
import com.cylande.unitedretail.framework.business.jbo.server.ApplicationModuleImpl;
import com.cylande.unitedretail.framework.tools.URStatement;
import com.cylande.unitedretail.message.batch.BatchBooleanResponseType;
import com.cylande.unitedretail.message.batch.BatchCriteriaType;
import com.cylande.unitedretail.message.batch.BatchRunCriteriaListType;
import com.cylande.unitedretail.message.batch.BatchRunCriteriaType;
import com.cylande.unitedretail.message.batch.BatchRunKeyType;
import com.cylande.unitedretail.message.batch.BatchRunListType;
import com.cylande.unitedretail.message.batch.BatchRunNameListType;
import com.cylande.unitedretail.message.batch.BatchRunNameType;
import com.cylande.unitedretail.message.batch.BatchRunScenarioType;
import com.cylande.unitedretail.message.batch.BatchRunType;
import com.cylande.unitedretail.message.batch.BatchStatusScenarioType;
import com.cylande.unitedretail.message.batch.BatchSummaryCriteriaCondensaType;
import com.cylande.unitedretail.message.batch.TaskAuditCriteriaListType;
import com.cylande.unitedretail.message.batch.TaskAuditCriteriaType;
import com.cylande.unitedretail.message.batch.TaskAuditListType;
import com.cylande.unitedretail.message.batch.TaskAuditType;
import com.cylande.unitedretail.message.batch.TaskRunListType;
import com.cylande.unitedretail.message.batch.TaskRunType;
import com.cylande.unitedretail.message.common.context.ContextType;
import com.cylande.unitedretail.message.common.criteria.CriteriaIntegerType;
import com.cylande.unitedretail.message.common.criteria.CriteriaStringType;
import com.cylande.unitedretail.message.network.businessunit.SiteKeyType;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.log4j.Logger;

import oracle.jbo.AttributeList;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ViewLinkImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BatchRunManagerModuleImpl extends ApplicationModuleImpl implements BatchRunManagerModule
{
  private static final Logger LOGGER = Logger.getLogger(BatchRunManagerModuleImpl.class);
  /**
   * Vue utilisée pour la suppression (deleteList).
   */
  private BatchRunViewImpl _deleteBatchRunView = null;

  /**
   * This is the default constructor (do not remove)
   */
  public BatchRunManagerModuleImpl()
  {
  }

  /**
   * Création d'un BatchRunType
   * @param pBatchRun
   * @param pScenario
   * @param pContext
   * @return BatchRunType
   */
  public BatchRunType createBatchRun(BatchRunType pBatchRun, BatchRunScenarioType pScenario, ContextType pContext)
  {
    BatchRunType result = new BatchRunType();
    if (pBatchRun != null)
    {
      AttributeList attList = new NameValuePairs();
      if (pBatchRun.getParentId() != null && pBatchRun.getParentId() != -1)
      {
        attList.setAttribute("ParentId", pBatchRun.getParentId());
      }
      attList.setAttribute("SiteCode", pBatchRun.getSite().getCode());
      attList.setAttribute("Path", pBatchRun.getPath());
      if (pBatchRun.getId() != null)
      {
        attList.setAttribute("Id", pBatchRun.getId());
      }
      BatchRunViewRow row = (BatchRunViewRow)getBatchRunView().createAndInitRow(attList);
      setRow(pBatchRun, row, true, pContext);
      result = getBean(row, pContext);
    }
    return result;
  }

  /**
   * createBatchRunList
   * @param pList
   * @param pScenario
   * @param pContext
   * @return BatchRunListType
   */
  public BatchRunListType createBatchRunList(BatchRunListType pList, BatchRunScenarioType pScenario, ContextType pContext)
  {
    BatchRunListType result = null;
    if (pList != null)
    {
      result = new BatchRunListType();
      for (int i = 0; i < pList.getValues().size(); i++)
      {
        result.getValues().add(createBatchRun(pList.getValues().get(i), pScenario, pContext));
      }
    }
    return result;
  }

  /**
   * deleteBatchRun
   * @param pKey
   * @param pScenario
   * @param pContext
   */
  public void deleteBatchRun(BatchRunKeyType pKey, BatchRunScenarioType pScenario, ContextType pContext)
  {
    getChrono().start();
    if (pKey != null)
    {
      BatchRunViewRow myRow = getBatchRunView().getRow(pKey);
      if (myRow != null)
      {
        deleteAssociatedRow(Integer.valueOf(myRow.getId().intValue()), pScenario, pContext);
        myRow.remove();
      }
    }
    getChrono().stop(this);
  }

  /**
   * deleteBatchRunList
   * @param pCriterias
   * @param pScenario
   * @param pContext
   */
  public void deleteBatchRunList(BatchRunCriteriaListType pCriterias, BatchRunScenarioType pScenario, ContextType pContext)
  {
    getChrono().start();
    if (pCriterias != null)
    {
      BatchRunViewImpl view = getDeleteBatchRunListView();
      try
      {
        view.initForwardOnly();
        view.findByCriterias(pCriterias);
        while (view.hasNext())
        {
          BatchRunViewRow currentRow = (BatchRunViewRow)view.next();
          deleteAssociatedRow(Integer.valueOf(currentRow.getId().intValue()), pScenario, pContext);
          currentRow.remove();
        }
      }
      finally
      {
        view.releaseForwardOnly();
        view.resetWhereClause();
      }
    }
    getChrono().stop(this);
  }

  /**
   * Méthode interne de suppression des batch_run.
   * @param pCriterias Critères de recherche
   * @param pScenario Scénario
   * @param pContext Contexte
   */
  private void internalDeleteBatchRunList(BatchRunCriteriaListType pCriterias, BatchRunScenarioType pScenario, ContextType pContext)
  {
    if (pCriterias != null)
    {
      deleteAssociatedRow(pCriterias, pScenario, pContext);
      BatchRunViewImpl view = getBatchRunView();
      try
      {
        view.initForwardOnly();
        view.findByCriterias(pCriterias);
        while (view.hasNext())
        {
          BatchRunViewRow currentRow = (BatchRunViewRow)view.next();
          currentRow.remove();
        }
      }
      finally
      {
        view.releaseForwardOnly();
        view.resetWhereClause();
      }
    }
  }

  /**
   * Méthode d'initialisation de la vue permettant de faire la suppression par
   * paquets
   * @param pCriterias Critères de recherche
   */
  public void initDeleteBatchRunList(BatchRunCriteriaListType pCriterias)
  {
    getChrono().start();
    _deleteBatchRunView = null;
    if (pCriterias != null)
    {
      for (BatchRunCriteriaType crit: pCriterias.getList())
      {
        // si le critère des parents n'est pas forcé ici à -1,
        // le remove du parent peut être effectué sur le remove des enfants entrainant le remove final du parent en erreur (JBO-25019)
        if (crit.getParentId() == null)
        {
          crit.setParentId(new CriteriaIntegerType());
          crit.getParentId().setEquals(-1);
        }
      }
      _deleteBatchRunView = getDeleteBatchRunListView();
      _deleteBatchRunView.initForwardOnly();
      _deleteBatchRunView.findByCriterias(pCriterias);
    }
    getChrono().stop(this);
  }

  /**
   * Test s'il reste des données à supprimer.
   * @return boolean
   */
  public boolean hasNextPacketToDelete()
  {
    return (_deleteBatchRunView != null) && (_deleteBatchRunView.hasNext());
  }

  /**
   * Supprime le paquet suivant d'enregistrements de BATCH_RUN.
   * @param pScenario Scénario
   * @param pContext Contexte
   */
  public void deleteBatchRunPacket(BatchRunScenarioType pScenario, ContextType pContext)
  {
    getChrono().start();
    if (_deleteBatchRunView != null)
    {
      int cpt = 0;
      while (_deleteBatchRunView.hasNext())
      {
        BatchRunViewRow currentRow = (BatchRunViewRow)_deleteBatchRunView.next();
        deleteAssociatedRow(Integer.valueOf(currentRow.getId().intValue()), pScenario, pContext);
        currentRow.remove();
        cpt++;
        if (cpt >= 1000)
        {
          break;
        }
      }
    }
    getChrono().stop(this);
  }

  /**
   * Méthode de finalisation permettant de réinitialiser la vue de recherche.
   */
  public void releaseDeleteBatchRunList()
  {
    getChrono().start();
    if (_deleteBatchRunView != null)
    {
      _deleteBatchRunView.releaseForwardOnly();
      _deleteBatchRunView.resetWhereClause();
      _deleteBatchRunView = null;
    }
    getChrono().stop(this);
  }

  /**
   * Suppression des données associées au BATCH_RUN dont la clé est passée en
   * paramètre.
   * @param pBatchId Identifiant de batch
   * @param pScenario Scénario
   * @param pContext Contexte
   */
  private void deleteAssociatedRow(Integer pBatchId, BatchRunScenarioType pScenario, ContextType pContext)
  {
    if ((pBatchId != null) && (pBatchId.intValue() != 0))
    {
      List<Integer> batchRunIdList = new ArrayList<Integer>();
      batchRunIdList.add(pBatchId);
      deleteAssociatedRow(batchRunIdList, pScenario, pContext);
    }
  }

  /**
   * Suppression des données associées aux BATCH_RUN correspondant aux critères
   * passés en paramètre.
   * @param pCriterias Critères de recherche sur les BATCH_RUN
   * @param pScenario Scénario
   * @param pContext Contexte
   */
  private void deleteAssociatedRow(BatchRunCriteriaListType pCriterias, BatchRunScenarioType pScenario, ContextType pContext)
  {
    List<Integer> batchIdList = new ArrayList<Integer>();
    BatchRunViewImpl batchRunView = getDeleteBatchRunView();
    try
    {
      batchRunView.initForwardOnly();
      batchRunView.findByCriterias(pCriterias);
      while (batchRunView.hasNext())
      {
        BatchRunViewRow currentRow = (BatchRunViewRow)batchRunView.next();
        batchIdList.add(Integer.valueOf(currentRow.getId().intValue()));
      }
    }
    finally
    {
      batchRunView.releaseForwardOnly();
      batchRunView.resetWhereClause();
    }
    deleteAssociatedRow(batchIdList, pScenario, pContext);
  }

  /**
   * Suppression des données associées aux identifiants de BATCH_RUN passés en
   * paramètre.
   * @param pBatchIdList Liste des identifiants de BATCH_RUN
   * @param pScenario Scénario
   * @param pContext Contexte
   */
  private void deleteAssociatedRow(List<Integer> pBatchIdList, BatchRunScenarioType pScenario, ContextType pContext)
  {
    if ((pBatchIdList != null) && (!pBatchIdList.isEmpty()))
    {
      URStatement deleteTaskAuditStmt = new URStatement(this);
      deleteTaskAuditStmt.addSQL("DELETE FROM TASK_AUDIT WHERE TASK IN (SELECT ID FROM TASK_RUN WHERE PARENT_ID = :parentId)");
      URStatement deleteFileProviderTraceStmt = new URStatement(this);
      deleteFileProviderTraceStmt.addSQL("DELETE FROM FILE_PROVIDER_TRACE WHERE TASK_ID IN (SELECT ID FROM TASK_RUN WHERE PARENT_ID = :parentId)");
      URStatement deleteTaskRunStmt = new URStatement(this);
      deleteTaskRunStmt.addSQL("DELETE FROM TASK_RUN WHERE PARENT_ID = :parentId");
      Integer batchIdCurrent = -1;
      try
      {
        try
        {
          for (Integer batchId: pBatchIdList)
          {
            batchIdCurrent = batchId;
            // Suppression des batchs enfants.
            BatchRunCriteriaListType batchRunCriterias = getBatchRunCriteriaList(batchId);
            internalDeleteBatchRunList(batchRunCriterias, pScenario, pContext);
            // Suppression des tasks associées.
            // TASK_AUDIT
            deleteTaskAuditStmt.setInt("parentId", batchId.intValue());
            deleteTaskAuditStmt.execute();
            // FILE_PROVIDER_TRACE
            deleteFileProviderTraceStmt.setInt("parentId", batchId.intValue());
            deleteFileProviderTraceStmt.execute();
            // TASK_RUN
            deleteTaskRunStmt.setInt("parentId", batchId.intValue());
            deleteTaskRunStmt.execute();
          }
        }
        finally
        {
          closeStatement(deleteTaskAuditStmt);
          closeStatement(deleteFileProviderTraceStmt);
          closeStatement(deleteTaskRunStmt);
        }
      }
      catch (SQLException sqlexception)
      {
        throw new TechnicalJboException(BatchErrorDetail.BATCH_DELETE_ASSOCIATED_ROW_ERROR, new Object[] { batchIdCurrent }, sqlexception);
      }
    }
  }

  private void closeStatement(URStatement pStatement)
  {
    try
    {
      pStatement.close();
    }
    catch (SQLException e)
    {
      LOGGER.error(e, e);
    }
  }

  /**
   * Retourne les critères correspondant au batchId passé en paramètre.
   * @param pBatchId Identifiant de batch
   * @return BatchRunCriteriaListType
   */
  private BatchRunCriteriaListType getBatchRunCriteriaList(Integer pBatchId)
  {
    BatchRunCriteriaListType result = new BatchRunCriteriaListType();
    BatchRunCriteriaType batchRunCriteria = new BatchRunCriteriaType();
    batchRunCriteria.setParentId(new CriteriaIntegerType());
    batchRunCriteria.getParentId().setEquals(pBatchId);
    result.getList().add(batchRunCriteria);
    return result;
  }

  /**
   * findBatchRun
   * @param pCriterias
   * @param pScenario
   * @param pContext
   * @return BatchRunListType
   */
  public BatchRunListType findBatchRun(BatchRunCriteriaListType pCriterias, BatchRunScenarioType pScenario, ContextType pContext)
  {
    //TODO changer le scenario isinerror
    BatchRunViewImpl view = getBatchRunView();
    try
    {
      view.initForwardOnly();
      BatchRunListType result = null;
      if (pCriterias != null)
      {
        view.findByCriterias(pCriterias);
        boolean scenarioInError = false;
        if (pScenario != null && pScenario.getBatchInErrorOnly() != null)
        {
          scenarioInError = pScenario.getBatchInErrorOnly();
        }
        if (view.hasNext())
        {
          result = new BatchRunListType();
          while (view.hasNext())
          {
            BatchRunViewRow row = (BatchRunViewRow)view.next();
            if (scenarioInError)
            {
              if (batchRowIsInError(row))
              {
                result.getValues().add(getBean(row, pContext));
              }
            }
            else
            {
              result.getValues().add(getBean(row, pContext));
            }
          } // end while
        }
        view.clearViewCriterias();
      }
      return result;
    }
    finally
    {
      view.releaseForwardOnly();
    }
  }

  /**
   * findBatchRunSummary
   * @param pParams
   * @param pScenario
   * @param pContext
   * @return BatchRunNameListType
   */
  public BatchRunNameListType findBatchRunSummary(BatchSummaryCriteriaCondensaType pParams, BatchRunScenarioType pScenario, ContextType pContext)
  {
    if (pParams == null)
    {
      return null;
    }
    String selectClause = "SELECT DISTINCT batch_run.BATCH_CODE FROM batch_run ";
    CriteriaTransformer criteriaTransformer = CriteriaTransformer.createCriteriaWhereClause(this);
    criteriaTransformer.addElement("batch_run.BATCH_CODE", pParams.getBatchName());
    criteriaTransformer.addElement("batch_run.SITE_CODE", pParams.getSite().getCode());
    criteriaTransformer.addElement("batch_run.STATE", pParams.getBatchState());
    criteriaTransformer.addElement("batch_run.START_TIME", pParams.getBatchStartDate());
    criteriaTransformer.addElement("batch_run.END_TIME", pParams.getBatchEndDate());
    criteriaTransformer.closeCurrentCriteria();
    StringBuffer queryBuff = new StringBuffer();
    queryBuff.append(selectClause).append(" WHERE ").append(criteriaTransformer.getWhereClause());
    ViewObject myView = createViewObjectFromQueryStmt("FindBatchRun", queryBuff.toString());
    myView.setWhereClauseParams(criteriaTransformer.getParams());
    myView.executeQuery();
    if (myView.getRowCount() == 0)
    {
      return null;
    }
    BatchRunNameListType result = new BatchRunNameListType();
    List<BatchRunNameType> list = new ArrayList<BatchRunNameType>();
    while (myView.hasNext())
    {
      Row row = myView.next();
      String batchPath = (String)row.getAttribute(0);
      BatchRunNameType batchRunName = new BatchRunNameType();
      batchRunName.setBatchName(batchPath);
      list.add(batchRunName);
    }
    result.setList(list);
    myView.remove();
    return result;
  }

  /**
   * Une instance d'un batch name est elle en erreur, attention au critères, il doit être equals
   * @param pCriteria
   * @param pScenario
   * @param pContext
   * @return résultat
   * @deprecated
   */
  public BatchBooleanResponseType atLeastBatchInstanceInError(BatchCriteriaType pCriteria, BatchRunScenarioType pScenario, ContextType pContext)
  {
    if (pCriteria == null || pCriteria.getName().getEquals() == null)
    {
      return null;
    }
    List<TaskAuditCriteriaType> listcrit = new ArrayList<TaskAuditCriteriaType>();
    TaskAuditCriteriaListType criterialist = new TaskAuditCriteriaListType();
    TaskAuditCriteriaType auditcrit = new TaskAuditCriteriaType();
    CriteriaStringType critpath = new CriteriaStringType();
    critpath.setStartsWith(pCriteria.getName().getEquals() + ".");
    auditcrit.setPath(critpath);
    listcrit.add(auditcrit);
    if (pScenario.getBatchRootOnly() == null || !pScenario.getBatchRootOnly().booleanValue())
    {
      TaskAuditCriteriaType auditcrit2 = new TaskAuditCriteriaType();
      CriteriaStringType critpath2 = new CriteriaStringType();
      critpath2.setContains("." + pCriteria.getName().getEquals() + ".");
      auditcrit2.setPath(critpath2);
      listcrit.add(auditcrit2);
    }
    criterialist.setList(listcrit);
    TaskAuditView myView = getTaskAuditView();
    boolean test = myView.atLeastFindResult(criterialist);
    return buildBooleanResponse(test);
  }

  public BatchBooleanResponseType atLeastBatchInstanceInError(BatchRunCriteriaType pCriteria, BatchRunScenarioType pScenario, ContextType pContext)
  {
    if (pCriteria == null)
    {
      return null;
    }
    TaskAuditView myView = getTaskAuditView();
    myView.findTaskAuditOfBatch(pCriteria);
    return buildBooleanResponse(myView.hasNext());
  }

  /**
   * Récupère la liste des TaskAudit d'un BatchRun
   * @param pKey
   * @param pScenario
   * @param pContext
   * @return TaskAuditListType
   */
  public TaskAuditListType getTaskAuditOfBatchRun(BatchRunKeyType pKey, BatchRunScenarioType pScenario, ContextType pContext)
  {
    if (pKey == null || pKey.getId() == null || pKey.getPath() == null)
    {
      return null;
    }
    if (pScenario != null && pScenario.getBatchErrorInDepth() != null && pScenario.getBatchErrorInDepth().booleanValue())
    {
      // recherche en profondeur
      return getTaskAuditOfBatchRunInDepth(pKey, pContext);
    }
    // recherche superficielle
    return getFirstTaskAuditOfBatchRun(pKey, pContext);
  }

  /**
   * Récupère les task_audit des tasks directement associées au batch
   * @param pKey
   * @param pContext
   * @return résultat
   */
  private TaskAuditListType getFirstTaskAuditOfBatchRun(BatchRunKeyType pKey, ContextType pContext)
  {
    TaskAuditListType result = new TaskAuditListType();
    TaskRunListType taskList = getTaskRunOfBatchRun(pKey, null, pContext);
    if (taskList != null)
    {
      TaskAuditCriteriaListType critList = new TaskAuditCriteriaListType();
      for (TaskRunType task: taskList.getValues())
      {
        TaskAuditCriteriaType crit = new TaskAuditCriteriaType();
        crit.setTaskId(new CriteriaIntegerType());
        crit.getTaskId().setEquals(task.getId());
        critList.getList().add(crit);
      }
      if (!critList.getList().isEmpty())
      {
        TaskAuditViewImpl errorsView = getTaskAuditView();
        errorsView.findByCriterias(critList);
        while (errorsView.hasNext())
        {
          TaskAuditViewRowImpl row = (TaskAuditViewRowImpl)errorsView.next();
          result.getValues().add(TaskAuditTransformer.toBean(row, pContext));
        }
      }
    }
    return !result.getValues().isEmpty() ? result : null;
  }

  /**
   * Récupère la liste des TaskAudit d'un BatchRun et de ses sous batchs
   * @param pKey
   * @return TaskAuditListType
   */
  private TaskAuditListType getTaskAuditOfBatchRunInDepth(BatchRunKeyType pKey, ContextType pContext)
  {
    // récupérer les taskaudit de premier niveau
    TaskAuditListType result = getFirstTaskAuditOfBatchRun(pKey, pContext);
    if (result == null)
    {
      result = new TaskAuditListType();
      result.setValues(new ArrayList<TaskAuditType>());
    }
    // pour chaque batchfils du batchrun récupérer les erreurs en profondeur (récursion)
    BatchRunCriteriaListType criterias = new BatchRunCriteriaListType();
    criterias.setList(new ArrayList<BatchRunCriteriaType>());
    BatchRunCriteriaType criteria = new BatchRunCriteriaType();
    CriteriaIntegerType critparentid = new CriteriaIntegerType();
    critparentid.setEquals(pKey.getId());
    criteria.setParentId(critparentid);
    criterias.getList().add(criteria);
    BatchRunListType batchrunlist = findBatchRun(criterias, null, pContext);
    if (batchrunlist != null && !batchrunlist.getValues().isEmpty())
    {
      Iterator<BatchRunType> it = batchrunlist.getValues().iterator();
      while (it.hasNext())
      {
        BatchRunType batchrun = it.next();
        BatchRunKeyType key = new BatchRunKeyType();
        key.setId(batchrun.getId());
        key.setPath(batchrun.getPath());
        key.setSite(batchrun.getSite());
        TaskAuditListType childTaskAudit = getTaskAuditOfBatchRunInDepth(key, pContext);
        if (childTaskAudit != null)
        {
          result.getValues().addAll(childTaskAudit.getValues());
        }
      }
    }
    if (!result.getValues().isEmpty())
    {
      return result;
    }
    return null;
  }

  /**
   * indique si il y encore une instance en cours pour le nom de batch passé en paramètre
   * @param pBatchCrit
   * @param pScenario
   * @param pContext
   * @return résultat
   * @deprecated
   */
  public BatchBooleanResponseType atLeastBatchInstanceIsRunning(BatchRunCriteriaType pBatchCrit, BatchRunScenarioType pScenario, ContextType pContext)
  {
    if (pBatchCrit == null)
    {
      return null;
    }
    BatchRunView myView = getBatchRunView();
    boolean test = myView.atLeastInstanceIsRunning(pBatchCrit);
    return buildBooleanResponse(test);
  }

  /**
   * indique si il y encore une instance en cours pour le nom de batch passé en paramètre
   * @param pBatchCrit
   * @param pScenario
   * @param pContext
   * @return résultat
   * @deprecated
   */
  public BatchBooleanResponseType atLeastBatchInstanceIsRunning(BatchCriteriaType pBatchCrit, BatchRunScenarioType pScenario, ContextType pContext)
  {
    if (pBatchCrit == null)
    {
      return null;
    }
    BatchRunView myView = getBatchRunView();
    boolean test = myView.atLeastInstanceIsRunning(pBatchCrit);
    return buildBooleanResponse(test);
  }

  /**
   * donne le dernier batch exécuté pour le nom de batch passé en paramètre
   * @param pBatchCrit
   * @param pScenario
   * @param pContext
   * @return résultat
   */
  public BatchRunType getLastActivationBatch(BatchRunCriteriaType pBatchCrit, BatchRunScenarioType pScenario, ContextType pContext)
  {
    if (pBatchCrit == null)
    {
      return null;
    }
    BatchRunView myView = getBatchRunView();
    myView.findLastActivationOfBatch(pBatchCrit);
    if (myView.hasNext())
    {
      BatchRunViewRow row = (BatchRunViewRow)myView.next();
      return getBean(row, pContext);
    }
    return null;
  }

  /**
   * donne le dernier batch exécuté pour le nom de batch passé en paramètre
   * @param pBatchCrit
   * @param pScenario
   * @param pContext
   * @return résultat
   */
  public BatchRunType getLastActivationBatch(BatchCriteriaType pBatchCrit, BatchRunScenarioType pScenario, ContextType pContext)
  {
    if (pBatchCrit == null)
    {
      return null;
    }
    BatchRunView myView = getBatchRunView();
    myView.findLastActivationOfBatch(pBatchCrit);
    if (myView.hasNext())
    {
      BatchRunViewRow row = (BatchRunViewRow)myView.next();
      return getBean(row, pContext);
    }
    return null;
  }

  /**
   * indique si il y a au moins une erreur pour une instance de batch précise. Le scénario précise s'il faut contrôler en profondeur
   * @param
   * @return résultat
   */
  public BatchBooleanResponseType atLeastTaskError(BatchRunKeyType pKey, BatchRunScenarioType pScenario, ContextType pContext)
  {
    if (pKey == null || pKey.getId() == null || pKey.getPath() == null)
    {
      return null;
    }
    //pCriteria
    boolean result = this.atLeastTaskError(pKey);
    if (result)
    {
      return buildBooleanResponse(true);
    }
    // else, recherche en profondeur si spécifié dans scénario
    if (pScenario != null && pScenario.getBatchErrorInDepth().booleanValue())
    {
      // récupérer les batch enfants
      BatchRunCriteriaListType crit = new BatchRunCriteriaListType();
      List<BatchRunCriteriaType> list = new ArrayList<BatchRunCriteriaType>();
      BatchRunCriteriaType batchcrit = new BatchRunCriteriaType();
      CriteriaIntegerType critint = new CriteriaIntegerType();
      critint.setEquals(pKey.getId());
      batchcrit.setParentId(critint);
      batchcrit.setSite(pKey.getSite());
      list.add(batchcrit);
      crit.setList(list);
      BatchRunListType batchRunList = findBatchRun(crit, null, pContext);
      if (batchRunList != null)
      {
        List<BatchRunType> childrenBatch = batchRunList.getValues();
        Iterator<BatchRunType> it = childrenBatch.iterator();
        while (it.hasNext())
        {
          BatchRunType batchrun = it.next();
          //BatchRunCriteriaType batchruncrit = new BatchRunCriteriaType();
          BatchRunKeyType batchChildKey = new BatchRunKeyType();
          batchChildKey.setId(batchrun.getId());
          batchChildKey.setPath(batchrun.getPath());
          batchChildKey.setSite(batchrun.getSite());
          BatchBooleanResponseType testchild = atLeastTaskError(batchChildKey, pScenario, pContext);
          if (testchild != null && testchild.isValue())
          {
            return buildBooleanResponse(true);
          }
        }
      }
    }
    return buildBooleanResponse(false);
  }

  private BatchBooleanResponseType buildBooleanResponse(boolean pBool)
  {
    BatchBooleanResponseType response = new BatchBooleanResponseType();
    response.setValue(pBool);
    return response;
  }

  /**
   * Indique si au moins une des task du batch désigné par la clé est en erreur
   * @param pKey
   * @return résultat
   */
  private boolean atLeastTaskError(BatchRunKeyType pKey)
  {
    if (pKey == null)
    {
      return false;
    }
    boolean response = false;
    BatchErrorsView errorsView = getBatchErrorsView();
    response = errorsView.atLeastTaskError(pKey);
    return response;
  }

  /**
   * @deprecated (?)
   * @param pRow
   * @return boolean
   */
  private boolean batchRowIsInError(BatchRunViewRow pRow)
  {
    BatchRunInErrorViewImpl myView = getBatchRunInErrorView();
    myView.findTaskAudit(pRow.getId().intValue(), getSite(pRow));
    if (myView.getRowCount() > 0)
    {
      return true;
    }
    // on vérifie pour les batchs enfants
    RowIterator rit = pRow.getBatchRunChildrenView();
    while (rit.hasNext())
    {
      BatchRunViewRow brvr = (BatchRunViewRow)rit.next();
      boolean childerror = batchRowIsInError(brvr);
      if (childerror)
      {
        return true;
      }
    }
    return false;
  }

  /**
   * getBatchRun
   * @param pKey
   * @param pScenario
   * @param pContext
   * @return BatchRunType
   */
  public BatchRunType getBatchRun(BatchRunKeyType pKey, BatchRunScenarioType pScenario, ContextType pContext)
  {
    BatchRunType result = null;
    if (pKey != null)
    {
      result = getBean(getBatchRunView().getRow(pKey), pContext);
    }
    return result;
  }

  /**
   * postBatchRun
   * @param pBatchRun
   * @param pScenario
   * @param pContext
   * @return BatchRunType
   */
  public BatchRunType postBatchRun(BatchRunType pBatchRun, BatchRunScenarioType pScenario, ContextType pContext)
  {
    return updateBatchRun(pBatchRun, pScenario, pContext, true);
  }

  /**
   * postBatchRunList
   * @param pList
   * @param pScenario
   * @param pContext
   * @return BatchRunListType
   */
  public BatchRunListType postBatchRunList(BatchRunListType pList, BatchRunScenarioType pScenario, ContextType pContext)
  {
    BatchRunListType result = null;
    if (pList != null)
    {
      result = new BatchRunListType();
      for (int i = 0; i < pList.getValues().size(); i++)
      {
        result.getValues().add(postBatchRun(pList.getValues().get(i), pScenario, pContext));
      }
    }
    return result;
  }

  /**
   * updateBatchRun
   * @param pBatchRun
   * @param pScenario
   * @param pContext
   * @return BatchRunType
   */
  public BatchRunType updateBatchRun(BatchRunType pBatchRun, BatchRunScenarioType pScenario, ContextType pContext)
  {
    return updateBatchRun(pBatchRun, pScenario, pContext, false);
  }

  /**
   * updateBatchRunList
   * @param pList
   * @param pScenario
   * @param pContext
   * @return BatchRunListType
   */
  public BatchRunListType updateBatchRunList(BatchRunListType pList, BatchRunScenarioType pScenario, ContextType pContext)
  {
    BatchRunListType result = null;
    if (pList != null)
    {
      result = new BatchRunListType();
      for (int i = 0; i < pList.getValues().size(); i++)
      {
        result.getValues().add(updateBatchRun(pList.getValues().get(i), pScenario, pContext));
      }
    }
    return result;
  }

  /**
   * updateBatchRun
   * @param pBatchRun
   * @param pScenario
   * @param pContext
   * @param pCreate
   * @return BatchRunType
   */
  private BatchRunType updateBatchRun(BatchRunType pBatchRun, BatchRunScenarioType pScenario, ContextType pContext, boolean pCreate)
  {
    BatchRunType result = null;
    if (pBatchRun != null)
    {
      BatchRunViewRow myRow = getBatchRunView().getRow(pBatchRun);
      if (myRow != null)
      {
        setRow(pBatchRun, myRow, false, pContext);
        result = getBean(myRow, pContext);
      }
      else if (pCreate)
      {
        result = createBatchRun(pBatchRun, pScenario, pContext);
      }
    }
    return result;
  }

  /**
   * getBean
   * @param pRow
   * @param pScenario
   * @return BatchRunType
   */
  private BatchRunType getBean(BatchRunViewRow pRow, ContextType pContext)
  {
    BatchRunType result = BatchRunTransformer.toBean(pRow, pContext);
    return result;
  }

  /**
   * setRow
   * @param pBatchRun
   * @param pRow
   * @param pCreate
   * @param pContext
   */
  private void setRow(BatchRunType pBatchRun, BatchRunViewRow pRow, boolean pCreate, ContextType pContext)
  {
    BatchRunTransformer.toRow(pBatchRun, pRow);
    if (pCreate)
    {
      getBatchRunView().insertRow(pRow);
    }
    getRootApplicationModule().getTransaction().postChanges();
  }
  /*---- CUSTOM METHODS ----*/

  /**
   * Cherche les run en erreur
   * @param pKey
   * @return boolean
   */
  public boolean batchRunIsOnError(BatchRunKeyType pKey)
  {
    boolean testError = false;
    BatchRunViewRow brvr = getBatchRunView().getRow(pKey);
    if (brvr == null)
    {
      //TODO exception : aucun run n'existe pour la clé spécifiée
      return false;
    }
    testError = atLeastErrorInBatchRow(brvr);
    return testError;
  }

  /**
   * atLeastErrorInBatchRow
   * @param pRow
   * @return boolean
   */
  private boolean atLeastErrorInBatchRow(BatchRunViewRow pRow)
  {
    boolean testError = false;
    RowIterator rowitBatchChildren = null;
    RowIterator rowitTaskChildren = null;
    Row row = null;
    if (pRow == null)
    {
      return false;
    }
    rowitBatchChildren = pRow.getBatchRunChildrenView();
    rowitTaskChildren = pRow.getTaskRunChildrenView();
    while (rowitTaskChildren.hasNext() && !testError)
    {
      row = rowitTaskChildren.next();
      testError = atLeastErrorInTaskRow((TaskRunViewRow)row);
    }
    while (rowitBatchChildren.hasNext() && !testError)
    {
      row = rowitBatchChildren.next();
      testError = atLeastErrorInBatchRow((BatchRunViewRow)row);
    }
    return testError;
  }

  /**
   * atLeastErrorInTaskRow
   * @param pRow
   * @return boolean
   */
  private boolean atLeastErrorInTaskRow(TaskRunViewRow pRow)
  {
    boolean testError = false;
    RowIterator rowit = null;
    int count = 0;
    if (pRow == null)
    {
      return false;
    }
    rowit = pRow.getTaskAuditView();
    count = rowit.getRowCount();
    if (count > 0)
    {
      testError = true;
    }
    return testError;
  }

  /**
   * getBatchRunOfBatchRun
   * @param pKey
   * @param pScenario
   * @param pContext
   * @return BatchRunListType
   */
  public BatchRunListType getBatchRunOfBatchRun(BatchRunKeyType pKey, BatchRunScenarioType pScenario, ContextType pContext)
  {
    BatchRunListType result = null;
    if (pKey == null)
    {
      return null;
    }
    BatchRunViewRow brvr = getBatchRunView().getRow(pKey);
    if (brvr == null)
    {
      return null;
    }
    RowIterator rowitBatchChildren = brvr.getBatchRunChildrenView();
    if (rowitBatchChildren.hasNext())
    {
      result = new BatchRunListType();
      List<BatchRunType> list = new ArrayList<BatchRunType>();
      BatchRunViewRow row;
      while (rowitBatchChildren.hasNext())
      {
        row = (BatchRunViewRow)rowitBatchChildren.next();
        list.add(BatchRunTransformer.toBean(row, pContext));
      }
      result.setValues(list);
    }
    return result;
  }

  /**
   * getTaskRunOfBatchRun
   * @param pKey
   * @param pScenario
   * @param pContext
   * @return TaskRunListType
   */
  public TaskRunListType getTaskRunOfBatchRun(BatchRunKeyType pKey, BatchRunScenarioType pScenario, ContextType pContext)
  {
    TaskRunListType result = null;
    if (pKey == null)
    {
      return null;
    }
    result = new TaskRunListType();
    BatchRunViewRow brvr = getBatchRunView().getRow(pKey);
    if (brvr != null)
    {
      RowIterator rowitTaskChildren = brvr.getTaskRunChildrenView();
      if (rowitTaskChildren.hasNext())
      {
        List<TaskRunType> list = new ArrayList<TaskRunType>();
        TaskRunViewRow row;
        while (rowitTaskChildren.hasNext())
        {
          row = (TaskRunViewRow)rowitTaskChildren.next();
          list.add(TaskRunTransformer.toBean(row, pContext));
        }
        result.setValues(list);
      }
    }
    return result;
  }

  public BatchRunType getLastBatchInProgress(BatchRunKeyType pKey, BatchStatusScenarioType pScenario, ContextType pContext)
  {
    BatchRunType result = null;
    BatchInProgressView view = getBatchInProgressView();
    view.findLastBatchByPath(pKey.getPath());
    if (view.hasNext())
    {
      result = new BatchRunType();
      BatchInProgressTransformer.toBean(result, (BatchInProgressViewRow)view.first());
    }
    return result;
  }

  /**Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  { /* package name */
    /* Configuration Name */
    launchTester("com.cylande.unitedretail.batch.business.module", "BatchRunManagerModuleLocal");
  }

  /**Container's getter for BatchRunView
   */
  public BatchRunViewImpl getBatchRunView()
  {
    return (BatchRunViewImpl)findViewObject("BatchRunView");
  }

  /**Container's getter for BatchRunInErrorView
   */
  public BatchRunInErrorViewImpl getBatchRunInErrorView()
  {
    return (BatchRunInErrorViewImpl)findViewObject("BatchRunInErrorView");
  }

  /**Container's getter for TaskAuditView
   */
  public TaskAuditViewImpl getTaskAuditView()
  {
    return (TaskAuditViewImpl)findViewObject("TaskAuditView");
  }

  /**Container's getter for TaskRunChildrenView
   */
  public TaskRunViewImpl getTaskRunChildrenView()
  {
    return (TaskRunViewImpl)findViewObject("TaskRunChildrenView");
  }

  /**Container's getter for TaskRunsOfBatchRunLink1
   */
  public ViewLinkImpl getTaskRunsOfBatchRunLink1()
  {
    return (ViewLinkImpl)findViewLink("TaskRunsOfBatchRunLink1");
  }

  /**Container's getter for BatchErrorsView
   */
  public BatchErrorsViewImpl getBatchErrorsView()
  {
    return (BatchErrorsViewImpl)findViewObject("BatchErrorsView");
  }

  /**
   * Retourne le site d'un batch
   * @param pRow
   * @return SiteKeyType
   */
  private SiteKeyType getSite(BatchRunViewRow pRow)
  {
    SiteKeyType site = new SiteKeyType();
    site.setCode(pRow.getSiteCode());
    return site;
  }

  /**Container's getter for BatchRunsOfBatchRunLink1
   */
  public ViewLinkImpl getBatchRunsOfBatchRunLink1()
  {
    return (ViewLinkImpl)findViewLink("BatchRunsOfBatchRunLink1");
  }

  /**Container's getter for BatchRunChildrenView
   */
  public BatchRunViewImpl getBatchRunChildrenView()
  {
    return (BatchRunViewImpl)findViewObject("BatchRunChildrenView");
  }

  /**Container's getter for BatchInProgressView
   */
  public BatchInProgressViewImpl getBatchInProgressView()
  {
    return (BatchInProgressViewImpl)findViewObject("BatchInProgressView");
  }

  /**
   * Container's getter for DeleteBatchRunView
   * @return BatchRunViewImpl
   */
  public BatchRunViewImpl getDeleteBatchRunView()
  {
    return (BatchRunViewImpl)findViewObject("DeleteBatchRunView");
  }

  /**
   * Container's getter for DeleteBatchRunListView
   * @return BatchRunViewImpl
   */
  public BatchRunViewImpl getDeleteBatchRunListView()
  {
    return (BatchRunViewImpl)findViewObject("DeleteBatchRunListView");
  }
}
